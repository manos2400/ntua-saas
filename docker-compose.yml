name: solve-my-problem
services:
  zookeeper:
    restart: always
    image: bitnami/zookeeper:latest
    ports:
      - 2181:2181
    volumes:
      - zookeeper-volume:/bitnami
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    networks:
      - saas
  problems-db:
    image: postgres
    restart: always
    environment:
      POSTGRES_DB: problems-ms-db
      POSTGRES_USER: saas
      POSTGRES_PASSWORD: saas2024
    volumes:
      - problems-db-data:/var/lib/postgresql/data
    networks:
      - saas
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U saas -d postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
  problems-ms:
    build:
      context: ./problems_ms/
      target: problems_ms
    ports:
      - 4000:4000
    environment:
      - PORT=4000
      - DB_HOST=problems-db
      - KAFKA_BROKER=kafka:9092
      - DB_USER=saas
      - DB_PASS=saas2024
      - DB_NAME=problems-ms-db
    networks:
      - saas
    depends_on:
      problems-db:
        condition: service_healthy
      kafka:
        condition: service_started
  results-db:
    image: postgres
    restart: always
    environment:
      POSTGRES_DB: results-ms-db
      POSTGRES_USER: saas
      POSTGRES_PASSWORD: saas2024
    volumes:
      - results-db-data:/var/lib/postgresql/data
    networks:
      - saas
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U saas -d postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
  results-ms:
    build:
      context: ./results_ms/
      target: results_ms
    ports:
      - 4002:4002
    environment:
      - PORT=4002
      - DB_HOST=results-db
      - KAFKA_BROKER=kafka:9092
      - DB_USER=saas
      - DB_PASS=saas2024
      - DB_NAME=results-ms-db
    networks:
      - saas
    depends_on:
      results-db:
        condition: service_healthy
      kafka:
        condition: service_started
  analytics-db:
    image: postgres
    restart: always
    environment:
      POSTGRES_DB: analytics-ms-db
      POSTGRES_USER: saas
      POSTGRES_PASSWORD: saas2024
    volumes:
      - analytics-db-data:/var/lib/postgresql/data
    networks:
      - saas
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U saas -d postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
  analytics-ms:
    build:
      context: ./analytics_ms/
      target: analytics_ms
    ports:
      - 4003:4003
    environment:
      - PORT=4003
      - DB_HOST=analytics-db
      - KAFKA_BROKER=kafka:9092
      - DB_USER=saas
      - DB_PASS=saas2024
      - DB_NAME=analytics-ms-db
    networks:
      - saas
    depends_on:
      analytics-db:
        condition: service_healthy
      kafka:
        condition: service_started
  credits-db:
    image: postgres
    restart: always
    environment:
      POSTGRES_DB: credits-ms-db
      POSTGRES_USER: saas
      POSTGRES_PASSWORD: saas2024
    volumes:
      - credits-db-data:/var/lib/postgresql/data
    networks:
      - saas
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U saas -d postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
  credits-ms:
    build:
      context: ./credits_ms/
      target: credits_ms
    ports:
      - 4004:4004
    environment:
      - PORT=4004
      - KAFKA_BROKER=kafka:9092
      - DB_HOST=credits-db
      - DB_USER=saas
      - DB_PASS=saas2024
      - DB_NAME=credits-ms-db
    networks:
      - saas
    depends_on:
      credits-db:
        condition: service_healthy
      kafka:
        condition: service_started
  submit-ms:
    build:
        context: ./submit_ms/
        target: submit_ms
    ports:
      - 4001:4001
    environment:
      - PORT=4001
      - KAFKA_BROKER=kafka:9092
    networks:
      - saas
    depends_on:
      kafka:
        condition: service_started
  generate-result-ms:
    build:
      context: ./generate_result_ms/
      target: generate_result_ms
    ports:
      - 4005:4005
    environment:
      - PORT=4005
      - KAFKA_BROKER=kafka:9092
    volumes:
      - ./generate_result_ms/data:/app/data
    networks:
      - saas
    depends_on:
      kafka:
        condition: service_started
  kafka:
    restart: always
    image: bitnami/kafka:latest
    ports:
      - 9093:9093
    volumes:
      - kafka-volume:/bitnami
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CLIENT:PLAINTEXT,EXTERNAL:PLAINTEXT
      - KAFKA_CFG_LISTENERS=CLIENT://:9092,EXTERNAL://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=CLIENT://kafka:9092,EXTERNAL://localhost:9093
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=CLIENT
    depends_on:
      - zookeeper
    networks:
      - saas
  adminer:
    image: adminer
    restart: always
    ports:
      - 8080:8080
    networks:
      - saas
  # frontend:
  #   build:
  #     context: ./frontend/
  #     target: frontend
  #   ports:
  #     - 3000:3000
  #   networks:
  #     - saas
  #   depends_on:
  #     - problems-ms
  #     - results-ms
  #     - analytics-ms
  #     - credits-ms
  #     - submit-ms
  #     - generate-result-ms
  #     - kafka
volumes:
  problems-db-data:
  results-db-data:
  analytics-db-data:
  credits-db-data:
  zookeeper-volume:
  kafka-volume:
networks:
  saas:
    name: saas
    external: true
